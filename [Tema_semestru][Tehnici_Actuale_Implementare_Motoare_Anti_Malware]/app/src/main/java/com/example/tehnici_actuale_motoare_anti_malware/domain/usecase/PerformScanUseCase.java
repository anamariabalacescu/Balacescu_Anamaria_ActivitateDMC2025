package com.example.tehnici_actuale_motoare_anti_malware.domain.usecase;

import android.content.Context;
import android.net.Uri;

import androidx.documentfile.provider.DocumentFile;

import com.example.tehnici_actuale_motoare_anti_malware.data.local.model.Threat;
import com.example.tehnici_actuale_motoare_anti_malware.data.repository.ThreatRepository;
import com.example.tehnici_actuale_motoare_anti_malware.data.remote.VirusTotalApiService;
import com.example.tehnici_actuale_motoare_anti_malware.data.remote.VTFileReport;
import com.example.tehnici_actuale_motoare_anti_malware.data.local.model.FileScanResult;
import com.example.tehnici_actuale_motoare_anti_malware.data.local.model.ScanType;
import com.example.tehnici_actuale_motoare_anti_malware.util.Constants;

import java.io.InputStream;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class PerformScanUseCase {
    private final ThreatRepository repo;
    private final Context context;
    private final Random rnd = new Random();

    private static final String[] DEF_NAMES = {
            "Trojan", "Worm", "Adware", "Spyware"
    };

    public PerformScanUseCase(Context context, ThreatRepository repo) {
        this.context = context;
        this.repo = repo;
    }

    public List<FileScanResult> execute(Uri treeUri, ScanType scanType) {
        List<FileScanResult> results = new ArrayList<>();
        DocumentFile tree = DocumentFile.fromTreeUri(context, treeUri);
        if (tree == null || !tree.isDirectory()) return results;

        DocumentFile[] files = tree.listFiles();
        if (files.length == 0) return results;

        for (DocumentFile file : files) {
            String fname = file.getName();
            switch (scanType) {
                case FAST:
                    boolean bad = rnd.nextBoolean();
                    results.add(new FileScanResult(fname, bad));
                    break;

                case INTENSIVE:
                    int count = 1 + rnd.nextInt(3);
                    List<Threat> threats = new ArrayList<>();
                    for (int i = 0; i < count; i++) {
                        String name = DEF_NAMES[rnd.nextInt(DEF_NAMES.length)];
                        int sev = 1 + rnd.nextInt(10);
                        long ts = System.currentTimeMillis();
                        double lat = 44.43 + (rnd.nextDouble() - 0.5) * 0.1;
                        double lon = 26.10 + (rnd.nextDouble() - 0.5) * 0.1;
                        Threat t = new Threat(0, name, sev, ts, lat, lon, fname);
                        long id = repo.insertThreat(t);
                        t.setId(id);
                        threats.add(t);
                    }
                    results.add(new FileScanResult(fname, threats));
                    break;

                case VIRUSTOTAL:
                    String hash = computeSHA256(file);
                    String summary;
                    try {
                        VirusTotalApiService vtService = new Retrofit.Builder()
                                .baseUrl(Constants.VT_BASE_URL)
                                .addConverterFactory(GsonConverterFactory.create())
                                .build()
                                .create(VirusTotalApiService.class);

                        Response<VTFileReport> resp = vtService
                                .getFileReport(Constants.VT_API_KEY, hash)
                                .execute();

                        if (resp.isSuccessful() && resp.body() != null) {
                            VTFileReport.Stats stats = resp.body()
                                    .data.attributes.last_analysis_stats;
                            summary = String.format(
                                    "malicious: %d\nharmless: %d\nsuspicious: %d\ntimeout: %d\nundetected: %d",
                                    stats.malicious,
                                    stats.harmless,
                                    stats.suspicious,
                                    stats.timeout,
                                    stats.undetected
                            );
                        } else {
                            summary = "VT Error: HTTP " + resp.code();
                        }
                    } catch (Exception ex) {
                        summary = "VT Error: " + ex.getClass().getSimpleName();
                    }
                    results.add(new FileScanResult(fname, summary));
                    break;
            }
        }
        return results;
    }

    private String computeSHA256(DocumentFile file) {
        try (InputStream in = context.getContentResolver()
                .openInputStream(file.getUri())) {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] buf = new byte[8192];
            int r;
            while ((r = in.read(buf)) > 0) {
                digest.update(buf, 0, r);
            }
            byte[] hashBytes = digest.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b : hashBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (Exception e) {
            return "";
        }
    }
}
