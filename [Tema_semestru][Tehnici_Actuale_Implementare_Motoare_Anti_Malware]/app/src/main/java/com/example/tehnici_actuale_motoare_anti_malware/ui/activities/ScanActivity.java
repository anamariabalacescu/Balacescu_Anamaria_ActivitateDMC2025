package com.example.tehnici_actuale_motoare_anti_malware.ui.activities;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import com.example.tehnici_actuale_motoare_anti_malware.R;
import com.example.tehnici_actuale_motoare_anti_malware.data.repository.ThreatRepositoryImpl;
import com.example.tehnici_actuale_motoare_anti_malware.data.local.model.FileScanResult;
import com.example.tehnici_actuale_motoare_anti_malware.data.local.model.ScanType;
import com.example.tehnici_actuale_motoare_anti_malware.domain.usecase.PerformScanUseCase;
import com.example.tehnici_actuale_motoare_anti_malware.util.DataHolder;
import com.example.tehnici_actuale_motoare_anti_malware.util.PrefManager;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScanActivity extends AppCompatActivity {
    private static final String TAG = "ScanActivity";

    private ProgressBar progressBar;
    private TextView tvStatus;
    private Handler handler = new Handler();
    private int progress = 0;
    private boolean cancelled = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scan);

        progressBar = findViewById(R.id.progressBarScan);
        tvStatus    = findViewById(R.id.tvScanStatus);
        Button btnCancel = findViewById(R.id.btnCancelScan);

        btnCancel.setOnClickListener(v -> {
            cancelled = true;
            finish();
        });

        handler.postDelayed(this::step, 100);
    }

    private void step() {
        if (cancelled) return;
        progress += 5;
        progressBar.setProgress(progress);
        tvStatus.setText("Scanning... " + progress + "%");

        if (progress < 100) {
            handler.postDelayed(this::step, 100);
        } else {
            performBackgroundScan();
        }
    }

    private void performBackgroundScan() {
        String uriStr = new PrefManager(this).getScanFolder();
        Uri treeUri = Uri.parse(uriStr);

        String scanTypeName = getIntent().getStringExtra("scanType");
        ScanType scanType = ScanType.valueOf(scanTypeName);

        new Thread(() -> {
            // 1) run scan logic
            PerformScanUseCase useCase = new PerformScanUseCase(
                    ScanActivity.this,
                    new ThreatRepositoryImpl(ScanActivity.this)
            );
            List<FileScanResult> results = useCase.execute(treeUri, scanType);

            // 2) if VT, push to Realtime Database
            if (scanType == ScanType.VIRUSTOTAL) {
                DatabaseReference ref = FirebaseDatabase
                        .getInstance()
                        .getReference("vt_history");
                for (FileScanResult res : results) {
                    Map<String,Object> map = new HashMap<>();
                    map.put("fileName",  res.getFileName());
                    map.put("summary",   res.getVtSummary());
                    map.put("timestamp", System.currentTimeMillis());

                    ref.push()
                            .setValue(map)
                            .addOnSuccessListener(__ ->
                                    Log.d(TAG, "RTDB entry saved")
                            ).addOnFailureListener(e ->
                                    Log.e(TAG, "RTDB save failed", e)
                            );
                }
            }

            // 3) hand off results and go to Results screen
            DataHolder.setScanResults(results);
            runOnUiThread(() -> {
                startActivity(new Intent(ScanActivity.this, ResultsActivity.class));
                finish();
            });
        }).start();
    }
}
