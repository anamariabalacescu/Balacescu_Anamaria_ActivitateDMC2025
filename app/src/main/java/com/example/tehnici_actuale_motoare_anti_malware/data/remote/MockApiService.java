package com.example.tehnici_actuale_motoare_anti_malware.data.remote;


import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import okhttp3.Request;
import okio.Timeout;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class MockApiService implements ApiService {
    @Override
    public Call<List<Definition>> fetchDefinitions() {
        List<Definition> mockList = Arrays.asList(
                new Definition(1, "Trojan", "Program rău intenționat care se ascunde în alt software."),
                new Definition(2, "Worm", "Se propagatează de la sine prin rețele."),
                new Definition(3, "Adware", "Afișează reclame nedorite."),
                new Definition(4, "Spyware", "Fură date despre utilizator fără permisiune.")
        );
        return new SimpleCall<>(mockList);
    }

    private static class SimpleCall<T> implements Call<T> {
        private final T data;

        SimpleCall(T data) {
            this.data = data;
        }

        @Override
        public Response<T> execute() throws IOException {
            return Response.success(data);
        }

        @Override
        public void enqueue(Callback<T> callback) {
            callback.onResponse(this, Response.success(data));
        }

        @Override public boolean isExecuted() { return false; }
        @Override public void cancel() {}
        @Override public boolean isCanceled() { return false; }
        @Override public Call<T> clone() { return new SimpleCall<>(data); }
        @Override public Request request() { return new Request.Builder().url("http://localhost/").build(); }
        @Override public Timeout timeout() { return Timeout.NONE; }
    }
}